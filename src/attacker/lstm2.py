# -*- coding: utf-8 -*-
"""LSTM2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nSGY27pCX5EelTViW_bTdPeAC2yr7qXd
"""

import time

import numpy as np
# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
from tensorflow.keras.layers import LSTM, Activation, Dense, Dropout, Input, Embedding
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import RMSprop

# %matplotlib inline

# Import the dataset
data_train = pd.read_csv(
    '/data/train.csv')
data_test = pd.read_csv(
    '/data/test.csv')
# ip.id max = 65535
# tcp.seq_raw max = 4124483354
X_train = data_train.iloc[:3932803, [1, 2, 3, 4, 5, 6, 7, 8]].values
Y_train = data_train.iloc[:3932803, 0].values

X_test = data_test.iloc[:983201, [1, 2, 3, 4, 5, 6, 7, 8]].values
Y_test = data_test.iloc[:983201, 0].values

X_train, Y_train, X_test, Y_test = list(
    map(lambda x: np.array(x, dtype=np.float64), [X_train, Y_train, X_test, Y_test]))
max_words = 3932804
max_len = 8
# tok = Tokenizer(num_words=max_words)
# tok.fit_on_texts(X_train)
# sequences = tok.texts_to_sequences(X_train)
# sequences_matrix = sequence.pad_sequences(sequences,maxlen=max_len)
sequences_matrix = X_train
Y_train = Y_train.reshape(-1, 1)
tcp_train = X_train[:, 2]
tcp_test = X_test[:, 2]
# Trộn train+test
tcp = np.concatenate([tcp_train, tcp_test])
# Sort tcp_test
tcp_set = list(set(tcp))
tcp_sort = list(np.sort(tcp_set))

# Đánh index value tcp_train và tcp_test= index trong tcp+sort
result_train = []
result_test = []
for value in tcp_train:
    index = tcp_sort.index(value)
    result_train.append(index)

for value in tcp_test:
    index = tcp_sort.index(value)
    result_test.append(index)

result_train = np.array(result_train)
result_test = np.array(result_test)

X_train[:, 2] = result_train
X_test[:, 2] = result_test

np.save('train.npy', X_train)
np.save('test.npy', X_test)


def RNN():
    inputs = Input(name='inputs', shape=[max_len])
    layer = Embedding(max_words, 50, input_length=max_len)(inputs)
    layer = LSTM(64)(layer)
    # layer = Merge([max_len, context_model], mode="dot", dot_axes=0)(layer)
    layer = Dense(256, name='FC1')(layer)
    layer = Activation('relu')(layer)
    layer = Dropout(0.5)(layer)
    layer = Dense(1, name='out_layer')(layer)
    layer = Activation('sigmoid')(layer)
    model = Model(inputs=inputs, outputs=layer)
    return model


model = RNN()
model.summary()
model.compile(loss='binary_crossentropy', optimizer=RMSprop(), metrics=['accuracy'])

start = time.time()
model.fit(sequences_matrix, Y_train, batch_size=2048, epochs=10,
          validation_split=0.2)
end = time.time()
model.save('model.h5')
exe_time = end - start
print("exe_time: " + str(exe_time))

start = time.time()
model.evaluate(X_test, Y_test)
end = time.time()
exe_time = end - start
print("eval time: " + str(exe_time))
